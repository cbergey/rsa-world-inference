var EPSILON = .001

var objects1 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 1},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 2},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 3}]

// correct world1
var objects2 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 2},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 1},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 3}]

var objects3 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 3},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 1},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 2}]


var objects4 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 1},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 3},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 2}]

// correct world2
var objects5 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 2},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 3},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 1}]

var objects6 = [{color: "blue", shape: "toma", string: "blue toma", a: 2, b: 3},
                {color: "blue", shape: "dax", string: "blue dax", a: 2, b: 2},
                {color: "blue", shape: "modi", string: "blue modi", a: 2, b: 1}]


var blue_target = function(p) {
  Bernoulli({p: p}).score(true)
}


// set of utterances
var utterances = ["toma", "dax", "modi", "blue toma", "blue dax", "blue modi"]

var worlds = [{objects: objects1, utterances: utterances, string: "foil1"},
              {objects: objects2, utterances: utterances, string: "correct1"},
              {objects: objects3, utterances: utterances, string: "foil2"},
              {objects: objects4, utterances: utterances, string: "foil3"},
              {objects: objects5, utterances: utterances, string: "correct2"},
              {objects: objects5, utterances: utterances, string: "foil4"}]


// prior over world states
var worldsPrior = function() {
  var world = uniformDraw(worlds)
  return world
}

// prior over object states
var objectPrior = function(objects) {
  var obj = uniformDraw(objects)
  return obj.string
}

// meaning function to interpret the utterances
var meaning = function(utterance, obj){
  _.includes(obj, utterance)
}

//typicality
var typicality = function(obj, utterance, p) {
   if(obj == utterance) {
    return Math.log(1)
   }

   else if(_.includes(obj, "red") && _.includes(utterance, "blue") ||
           _.includes(obj, "blue") && _.includes(utterance, "red") ||
           _.includes(obj, "dax") && _.includes(utterance, "toma") ||
           _.includes(obj, "toma") && _.includes(utterance, "dax")
         ) {

      return Math.log(EPSILON)
   }

   else if(_.includes(obj, "blue")) {
    return blue_target(p)
  }

   else {
    return blue_target(1 - p)
  }

}

// literal listener
var literalListener = function(world, utterance){
  Infer({model: function(){
    var obj = objectPrior(world.objects);
    condition(meaning(utterance, obj))
    return obj
  }})
}

// utterance prior
var utterancePrior = function(utterances) {
  var utterance = uniformDraw(utterances)
  return utterance
}

//cost is number of words
var cost = function(utterance) {
 return Math.log(utterance.split(" ").length + 1)
 //return 0
}

// define actor optimality
var alpha = 2

// pragmatic speaker
var speaker = function(world, obj, p){
  Infer({model: function(){
    var utterance = uniformDraw(world.utterances)
    factor(alpha * (literalListener(world, utterance).score(obj) -
      cost(utterance) + typicality(obj, utterance, p)))
    return utterance
  }})
}

// pragmatic listener
var pragmaticListener = function(utterance){
  Infer({method: 'rejection', samples: 10000, model: function(){
    var world = worldsPrior()
    var obj = objectPrior(world.objects)

    var obj_file = _.find(world.objects, {'string':obj})

    var p = sample(Beta({a: obj_file.a, b: obj_file.b}))
    //var p = sample(Uniform({a:0, b: 1}))
    observe(speaker(world, obj, p), utterance)
    return {world: world.string, obj: obj, p: p}
  }})
}

pragmaticListener(_.first(data))
